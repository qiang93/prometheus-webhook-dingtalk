{"version":3,"sources":["Navbar.tsx","withStatusIndicator.tsx","utils/useFetch.ts","pages/Config.tsx","pages/Flags.tsx","pages/Status.tsx","pages/Playground.tsx","App.tsx","index.tsx"],"names":["Navigation","useState","isOpen","setIsOpen","Navbar","className","dark","color","expand","fixed","NavbarToggler","onClick","to","Collapse","navbar","style","justifyContent","Nav","NavItem","NavLink","tag","Link","UncontrolledDropdown","nav","inNavbar","DropdownToggle","caret","DropdownMenu","DropdownItem","withStatusIndicator","Component","error","isLoading","customErrorMsg","rest","Alert","displayName","message","size","icon","faSpinner","spin","transform","top","left","useFetch","url","options","status","response","setResponse","setError","setIsLoading","useEffect","a","async","fetch","res","ok","Error","statusText","json","fetchData","YamlContent","yaml","ConfigWithStatusIndicator","ConfigContent","data","copied","setCopied","config","text","onCopy","_","result","setTimeout","Button","disabled","Config","FlagsContent","Table","bordered","striped","Object","keys","map","key","FlagsWithStatusIndicator","Flags","sectionTitles","statusConfig","startTime","title","customizeValue","v","Date","toUTCString","CWD","reloadConfigSuccess","lastConfigTime","goroutineCount","StatusContent","statuses","i","entries","k","val","customRow","skip","width","StatusWithStatusIndicator","Status","runtime","SyntaxHighlighter","registerLanguage","markdown","initialInputs","demoAlertJSON","JSON","stringify","demoAlert","Playground","leftActiveTab","setLeftActiveTab","rightActiveTab","setRightActiveTab","inputs","setInputs","useDebouncedCallback","method","body","setRenderError","setMarkdown","console","info","toString","startRenderMarkdown","delayedRender","renderError","templateConfigResp","templates","currentTemplate","setCurrentTemplate","templateLoaderComponent","InputGroup","InputGroupAddon","addonType","Input","type","onChange","event","idx","parseInt","target","value","tpl","e","c","id","name","newState","Row","Col","Form","FormGroup","hidden","pills","classnames","active","href","TabContent","activeTab","TabPane","tabId","Label","height","evt","md","source","parserOptions","gfm","commonmark","language","atomOneLight","customStyle","App","Container","fluid","paddingTop","basepath","noThrow","from","path","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0dea566d.chunk.js","sourcesContent":["import React, { FC, useState } from 'react';\nimport { Link } from '@reach/router';\nimport {\n  Collapse,\n  DropdownItem,\n  DropdownMenu,\n  DropdownToggle,\n  Nav,\n  Navbar,\n  NavbarToggler,\n  NavItem,\n  NavLink,\n  UncontrolledDropdown,\n} from 'reactstrap';\n\nconst Navigation: FC = () => {\n  const [isOpen, setIsOpen] = useState(false);\n  const toggle = () => setIsOpen(!isOpen);\n\n  return (\n    <Navbar className=\"mb-3\" dark color=\"dark\" expand=\"md\" fixed=\"top\">\n      <NavbarToggler onClick={toggle} />\n      <Link className=\"pt-0 navbar-brand\" to=\"/ui/playground\">\n        Prometheus Webhook Dingtalk\n      </Link>\n      <Collapse isOpen={isOpen} navbar style={{ justifyContent: 'space-between' }}>\n        <Nav className=\"ml-0\" navbar>\n          <NavItem>\n            <NavLink tag={Link} to=\"/ui/playground\">\n              Playground\n            </NavLink>\n          </NavItem>\n          <UncontrolledDropdown nav inNavbar>\n            <DropdownToggle nav caret>\n              Status\n            </DropdownToggle>\n            <DropdownMenu>\n              <DropdownItem tag={Link} to=\"/ui/status\">\n                Runtime & Build Information\n              </DropdownItem>\n              <DropdownItem tag={Link} to=\"/ui/flags\">\n                Command-Line Flags\n              </DropdownItem>\n              <DropdownItem tag={Link} to=\"/ui/config\">\n                Configuration\n              </DropdownItem>\n            </DropdownMenu>\n          </UncontrolledDropdown>\n        </Nav>\n      </Collapse>\n    </Navbar>\n  );\n};\n\nexport default Navigation;\n","import React, { ComponentType, FC } from 'react';\nimport { Alert } from 'reactstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSpinner } from '@fortawesome/free-solid-svg-icons';\n\ninterface StatusIndicatorProps {\n  error?: Error;\n  isLoading?: boolean;\n  customErrorMsg?: JSX.Element;\n}\n\nexport const withStatusIndicator = <T extends {}>(Component: ComponentType<T>): FC<StatusIndicatorProps & T> => ({\n  error,\n  isLoading,\n  customErrorMsg,\n  ...rest\n}) => {\n  if (error) {\n    return (\n      <Alert color=\"danger\">\n        {customErrorMsg ? (\n          customErrorMsg\n        ) : (\n          <>\n            <strong>Error:</strong> Error fetching {Component.displayName}: {error.message}\n          </>\n        )}\n      </Alert>\n    );\n  }\n\n  if (isLoading) {\n    return (\n      <FontAwesomeIcon\n        size=\"3x\"\n        icon={faSpinner}\n        spin\n        className=\"position-absolute\"\n        style={{ transform: 'translate(-50%, -50%)', top: '50%', left: '50%' }}\n      />\n    );\n  }\n  return <Component {...(rest as T)} />;\n};\n","import { useState, useEffect } from 'react';\n\nexport type APIResponse<T> = { status: string; data?: T };\n\nexport interface FetchState<T> {\n  response: APIResponse<T>;\n  error?: Error;\n  isLoading: boolean;\n}\n\nexport const useFetch = <T extends {}>(url: string, options?: RequestInit): FetchState<T> => {\n  const [response, setResponse] = useState<APIResponse<T>>({ status: 'start fetching' });\n  const [error, setError] = useState<Error>();\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      setIsLoading(true);\n      try {\n        const res = await fetch(url, options);\n        if (!res.ok) {\n          throw new Error(res.statusText);\n        }\n        const json = (await res.json()) as APIResponse<T>;\n        setResponse(json);\n        setIsLoading(false);\n      } catch (error) {\n        setError(error);\n      }\n    };\n    fetchData();\n  }, [url, options]);\n  return { response, error, isLoading };\n};\n","import React, { FC, useState } from 'react';\nimport { Button } from 'reactstrap';\nimport { RouteComponentProps } from '@reach/router';\nimport CopyToClipboard from 'react-copy-to-clipboard';\nimport { withStatusIndicator } from '../withStatusIndicator';\nimport { useFetch } from '../utils/useFetch';\n\nimport './Config.css';\n\ntype YamlConfig = { yaml?: string };\n\ninterface ConfigContentProps {\n  error?: Error;\n  data?: YamlConfig;\n}\n\nconst YamlContent = ({ yaml }: YamlConfig) => <pre className=\"config-yaml\">{yaml}</pre>;\nYamlContent.displayName = 'Config';\n\nconst ConfigWithStatusIndicator = withStatusIndicator(YamlContent);\n\nexport const ConfigContent: FC<ConfigContentProps> = ({ error, data }) => {\n  const [copied, setCopied] = useState(false);\n  const config = data && data.yaml;\n  return (\n    <>\n      <h2>\n        Configuration&nbsp;\n        <CopyToClipboard\n          text={config!}\n          onCopy={(_, result) => {\n            setCopied(result);\n            setTimeout(setCopied, 1500);\n          }}\n        >\n          <Button color=\"primary\" disabled={!config}>\n            {copied ? 'Copied' : 'Copy to clipboard'}\n          </Button>\n        </CopyToClipboard>\n      </h2>\n      <ConfigWithStatusIndicator error={error} isLoading={!config} yaml={config} />\n    </>\n  );\n};\n\nconst Config: FC<RouteComponentProps> = () => {\n  const { response, error } = useFetch<YamlConfig>(`/api/v1/status/config`);\n  return <ConfigContent error={error} data={response.data} />;\n};\n\nexport default Config;\n","import React, { FC } from 'react';\nimport { RouteComponentProps } from '@reach/router';\nimport { Table } from 'reactstrap';\nimport { withStatusIndicator } from '../withStatusIndicator';\nimport { useFetch } from '../utils/useFetch';\n\ninterface FlagMap {\n  [key: string]: string;\n}\n\ninterface FlagsProps {\n  data?: FlagMap;\n}\n\nexport const FlagsContent: FC<FlagsProps> = ({ data = {} }) => {\n  return (\n    <>\n      <h2>Command-Line Flags</h2>\n      <Table bordered size=\"sm\" striped>\n        <tbody>\n          {Object.keys(data).map(key => (\n            <tr key={key}>\n              <th>{key}</th>\n              <td>{data[key]}</td>\n            </tr>\n          ))}\n        </tbody>\n      </Table>\n    </>\n  );\n};\nconst FlagsWithStatusIndicator = withStatusIndicator(FlagsContent);\n\nFlagsContent.displayName = 'Flags';\n\nconst Flags: FC<RouteComponentProps> = () => {\n  const { response, error, isLoading } = useFetch<FlagMap>('/api/v1/status/flags');\n  return <FlagsWithStatusIndicator data={response.data} error={error} isLoading={isLoading} />;\n};\n\nexport default Flags;\n","import React, { FC, Fragment } from 'react';\nimport { RouteComponentProps } from '@reach/router';\nimport { Table } from 'reactstrap';\nimport { withStatusIndicator } from '../withStatusIndicator';\nimport { useFetch } from '../utils/useFetch';\n\nconst sectionTitles = ['Runtime Information', 'Build Information'];\n\ninterface StatusConfig {\n  [k: string]: { title?: string; customizeValue?: (v: any, key: string) => any; customRow?: boolean; skip?: boolean };\n}\n\ntype StatusPageState = { [k: string]: string };\n\ninterface StatusPageProps {\n  data?: StatusPageState[];\n}\n\nexport const statusConfig: StatusConfig = {\n  startTime: { title: 'Start time', customizeValue: (v: string) => new Date(v).toUTCString() },\n  CWD: { title: 'Working directory' },\n  reloadConfigSuccess: {\n    title: 'Configuration reload',\n    customizeValue: (v: boolean) => (v ? 'Successful' : 'Unsuccessful'),\n  },\n  lastConfigTime: { title: 'Last successful configuration reload' },\n  goroutineCount: { title: 'Goroutines' },\n};\n\nexport const StatusContent: FC<StatusPageProps> = ({ data = [] }) => {\n  return (\n    <>\n      {data.map((statuses, i) => {\n        return (\n          <Fragment key={i}>\n            <h2>{sectionTitles[i]}</h2>\n            <Table className=\"h-auto\" size=\"sm\" bordered striped>\n              <tbody>\n                {Object.entries(statuses).map(([k, v], i) => {\n                  const { title = k, customizeValue = (val: any) => val, customRow, skip } = statusConfig[k] || {};\n                  if (skip) {\n                    return null;\n                  }\n                  if (customRow) {\n                    return customizeValue(v, k);\n                  }\n                  return (\n                    <tr key={k}>\n                      <th className=\"capitalize-title\" style={{ width: '35%' }}>\n                        {title}\n                      </th>\n                      <td className=\"text-break\">{customizeValue(v, title)}</td>\n                    </tr>\n                  );\n                })}\n              </tbody>\n            </Table>\n          </Fragment>\n        );\n      })}\n    </>\n  );\n};\nconst StatusWithStatusIndicator = withStatusIndicator(StatusContent);\n\nStatusContent.displayName = 'Status';\n\nconst Status: FC<RouteComponentProps> = () => {\n  const path = '/api/v1';\n  const status = useFetch<StatusPageState>(`${path}/status/runtimeinfo`);\n  const runtime = useFetch<StatusPageState>(`${path}/status/buildinfo`);\n\n  let data;\n  if (status.response.data && runtime.response.data) {\n    data = [status.response.data, runtime.response.data];\n  }\n\n  return (\n    <StatusWithStatusIndicator\n      data={data}\n      isLoading={status.isLoading || runtime.isLoading}\n      error={status.error || runtime.error}\n    />\n  );\n};\n\nexport default Status;\n","import React, { FC, useEffect, useState } from 'react';\nimport { RouteComponentProps } from '@reach/router';\nimport {\n  Alert,\n  Button,\n  Col,\n  Form,\n  FormGroup,\n  Input,\n  InputGroup,\n  InputGroupAddon,\n  Label,\n  Nav,\n  NavItem,\n  NavLink,\n  Row,\n  TabContent,\n  TabPane,\n} from 'reactstrap';\nimport { useDebouncedCallback } from 'use-debounce';\nimport ReactMarkdown from 'react-markdown';\nimport { Light as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport markdown from 'react-syntax-highlighter/dist/esm/languages/hljs/markdown';\nimport { atomOneLight } from 'react-syntax-highlighter/dist/esm/styles/hljs';\nimport classnames from 'classnames';\nimport './Playground.css';\nimport demoAlert from './PlaygroundDemoAlert.json';\nimport { useFetch } from '../utils/useFetch';\n\nSyntaxHighlighter.registerLanguage('markdown', markdown);\n\ntype TemplateConfig = {\n  name: string;\n  text: string;\n};\n\ntype TemplatesConfig = {\n  templates: [TemplateConfig];\n};\n\ntype RenderApiData = {\n  markdown: string;\n};\n\ninterface RenderApiResponse {\n  status: string;\n  error?: string;\n  errorType?: string;\n  data?: RenderApiData;\n}\n\nconst demoAlertJson = JSON.stringify(demoAlert, null, 2);\n\nconst initialInputs = {\n  text: `{{ template \"ding.link.content\" . }}`,\n  demoAlertJSON: demoAlertJson,\n};\n\nconst Playground: FC<RouteComponentProps> = () => {\n  const [leftActiveTab, setLeftActiveTab] = useState('1');\n  const [rightActiveTab, setRightActiveTab] = useState('1');\n  const [inputs, setInputs] = useState(initialInputs);\n\n  const startRenderMarkdown = async () => {\n    try {\n      const res = await fetch('/api/v1/status/templates/render', {\n        method: 'POST',\n        body: JSON.stringify(inputs),\n      });\n\n      const json = (await res.json()) as RenderApiResponse;\n      if (res.ok) {\n        setRenderError(false);\n\n        if (json.data) {\n          setMarkdown(json.data.markdown);\n        }\n      } else {\n        setRenderError(true);\n        console.info(`Error rendering template: ${json.error}`);\n      }\n    } catch (e) {\n      setRenderError(true);\n      console.info(`Unhandled error rendering template: ${e.toString()}`);\n    }\n  };\n  const [delayedRender] = useDebouncedCallback(() => {\n    startRenderMarkdown();\n  }, 250);\n\n  useEffect(() => {\n    delayedRender();\n  }, [delayedRender, inputs]);\n\n  const [markdown, setMarkdown] = useState('');\n  const [renderError, setRenderError] = useState(false);\n\n  const { response: templateConfigResp } = useFetch<TemplatesConfig>('/api/v1/status/templates');\n  let templates: TemplateConfig[] = [];\n  if (templateConfigResp && templateConfigResp.data && templateConfigResp.data.templates) {\n    templates = templateConfigResp.data.templates;\n  }\n  const [currentTemplate, setCurrentTemplate] = useState({ text: initialInputs.text });\n  const handleTemplateChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    try {\n      const idx = parseInt(event.target.value, 10);\n      const tpl = templates[idx];\n      setCurrentTemplate({ text: tpl.text });\n    } catch (e) {\n      setCurrentTemplate({ text: initialInputs.text });\n    }\n  };\n  const loadTemplate = () => {\n    const newState = {\n      ...inputs,\n      ...{\n        text: currentTemplate.text,\n      },\n    };\n    setInputs(newState);\n  };\n\n  const templateLoaderComponent = (\n    <InputGroup>\n      <InputGroupAddon addonType=\"prepend\">Templates:</InputGroupAddon>\n      <Input type=\"select\" onChange={handleTemplateChange}>\n        {templates.map((c, id) => (\n          <option key={id} value={id}>\n            {c.name}\n          </option>\n        ))}\n      </Input>\n      <InputGroupAddon addonType=\"append\">\n        <Button color=\"primary\" onClick={loadTemplate}>\n          Load\n        </Button>\n      </InputGroupAddon>\n    </InputGroup>\n  );\n\n  return (\n    <div className=\"panel\">\n      <Row>\n        <Col>\n          <Form>\n            <FormGroup>{templateLoaderComponent}</FormGroup>\n          </Form>\n        </Col>\n        <Col>\n          <Alert color=\"danger\" hidden={!renderError}>\n            Unable to render template, check the console for details.\n          </Alert>\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <div className=\"preview-nav\">\n            <Nav pills>\n              <NavItem>\n                <NavLink\n                  className={classnames({ active: leftActiveTab === '1' })}\n                  onClick={() => setLeftActiveTab('1')}\n                  href=\"#\"\n                >\n                  Template\n                </NavLink>\n              </NavItem>\n              <NavItem>\n                <NavLink\n                  className={classnames({ active: leftActiveTab === '2' })}\n                  onClick={() => setLeftActiveTab('2')}\n                  href=\"#\"\n                >\n                  Alert JSON\n                </NavLink>\n              </NavItem>\n            </Nav>\n          </div>\n          <TabContent activeTab={leftActiveTab}>\n            <TabPane tabId=\"1\">\n              <Form>\n                <FormGroup>\n                  <Label className=\"form-label\">Markdown Text:</Label>\n                  <Input\n                    type=\"textarea\"\n                    className=\"text-monospace\"\n                    style={{ height: '500px' }}\n                    value={inputs.text}\n                    onChange={evt => setInputs({ ...inputs, ...{ text: evt.target.value } })}\n                  />\n                </FormGroup>\n              </Form>\n            </TabPane>\n            <TabPane tabId=\"2\">\n              <Form>\n                <FormGroup>\n                  <Label className=\"form-label\">Demo Prometheus Alert (JSON):</Label>\n                  <Input\n                    type=\"textarea\"\n                    className=\"text-monospace\"\n                    style={{ height: '500px' }}\n                    value={inputs.demoAlertJSON}\n                    onChange={evt => setInputs({ ...inputs, ...{ demoAlertJSON: evt.target.value } })}\n                  />\n                </FormGroup>\n              </Form>\n            </TabPane>\n          </TabContent>\n        </Col>\n        <Col md={6}>\n          <div className=\"preview-nav\">\n            <Nav pills>\n              <NavItem>\n                <NavLink\n                  className={classnames({ active: rightActiveTab === '1' })}\n                  onClick={() => setRightActiveTab('1')}\n                  href=\"#\"\n                >\n                  Preview\n                </NavLink>\n              </NavItem>\n              <NavItem>\n                <NavLink\n                  className={classnames({ active: rightActiveTab === '2' })}\n                  onClick={() => setRightActiveTab('2')}\n                  href=\"#\"\n                >\n                  Markdown\n                </NavLink>\n              </NavItem>\n            </Nav>\n          </div>\n          <TabContent activeTab={rightActiveTab}>\n            <TabPane tabId=\"1\">\n              <Form>\n                <FormGroup>\n                  <Label className=\"form-label\">Preview:</Label>\n                  <div className=\"preview\">\n                    <div className=\"clearfix preview-content-area\">\n                      <div className=\"message-bubble\">\n                        <ReactMarkdown\n                          source={markdown}\n                          className={'markdown-content'}\n                          parserOptions={{\n                            gfm: false,\n                            commonmark: true,\n                          }}\n                        />\n                      </div>\n                    </div>\n                  </div>\n                </FormGroup>\n              </Form>\n            </TabPane>\n            <TabPane tabId=\"2\">\n              <Form>\n                <FormGroup>\n                  <Label className=\"form-label\">Markdown:</Label>\n                  <div className=\"preview-markdown\">\n                    <SyntaxHighlighter language=\"markdown\" style={atomOneLight} customStyle={{ height: '500px' }}>\n                      {markdown}\n                    </SyntaxHighlighter>\n                  </div>\n                </FormGroup>\n              </Form>\n            </TabPane>\n          </TabContent>\n        </Col>\n      </Row>\n    </div>\n  );\n};\n\nexport default Playground;\n","import React from 'react';\nimport Navigation from './Navbar';\nimport { Container } from 'reactstrap';\nimport { Redirect, Router } from '@reach/router';\nimport { Config, Flags, Playground, Status } from './pages';\nimport './App.css';\n\nconst App: React.FC = () => {\n  return (\n    <>\n      <Navigation />\n      <Container fluid style={{ paddingTop: 70 }}>\n        <Router basepath=\"/ui\">\n          <Redirect noThrow from=\"/\" to=\"/ui/playground\" />\n\n          {/*\n            NOTE: Any route added here needs to also be added to the list of\n            React-handled router paths (\"reactRouterPaths\") in /web/web.go.\n          */}\n          <Playground path={'/playground'} />\n          <Config path=\"/config\" />\n          <Flags path=\"/flags\" />\n          <Status path=\"/status\" />\n        </Router>\n      </Container>\n    </>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}